面向对象：当需要一个功能的时候，自己不处理详细的步骤，找人做事儿。
面向过程：当需要一个功能的时候，所有的过程都亲力亲为，处理每一个代码细节。
类与对象的关系：
	属性：事物的特征描述信息，“是什么”
	行为：事物的能力行为方案，“能做什么”
	类：抽象的，用来模拟虚拟现实事物（设计图）
	对象：（new出来的）具体的，是事物的具体实例（实物）
类的定义：
	1、成员变量（属性）：直接在类里面定义，在方法外，即成员变量。
	2、成员方法（行为）：将普通的方法去掉static关键字， 即成员方法。
根据类创建对象：
	类名称  对象名（引用名）  =  new  类名称（）；
使用对象中的成员变量：
	对象名.成员变量名
	成员变量没有赋值，是默认值
使用对象当中的成员方法：
	对象名.成员方法
	想用谁就点谁
类是一种引用数据类型：
	1、导包
	2、创建
		类名称 对象名（引用名） = new 类名称（）；
	3、使用
		对象名.成员变量名
		对象名.成员方法
alt shift r:变量整体替换
private关键字：确保数据安全，不能直接访问，
	为private成员变量编写一对Setter、Getter方法
Setter：
	专门定义了一个成员方法用来设置成员变量的数据
	有参数，无返回值（void）
Getter：
	专门定义了一个成员方法用来获取成员变量的数据
	有返回值，无参数
this关键字：
	解决重名问题，将重名的成员变量与局部变量区分开来
	当局部变量跟成员变量重名时，方法中会根据就“近原则“”使用局部变量。
	通过谁调用的方法，谁就是this
	this.成员变量
构造方法（constructor）：
	专门用来创建对象的方法，当通过new关键字调用对象时，就是在调用构造方法。
	格式：     new   对象名称（）；
		public 构造方法名（参数类型 参数名称）{
			方法体
			}
	注意:
		1、不能写返回值类型，void也不写
		2、必须和所在类的名称相同，大小写都一样
		3、可以重载
		4、如果没有构造方法编译器就默认赠送一个无参数的构造方法，如果有至少一个，就不赠送默认的。
	构造方法重载:
		也是一种方法，也可以进行方法重载（方法名相同，参数列表不同）		
		优点：
			1、无参构造方法，可以直接new对象				2、全参数的构造方法，可以在new对象的同时对成员变量直接赋值

标准的pojo类：
	1、所有的的成员变量使用private关键字私有化
	2、为每一个成员变量编写一对儿Getter、Setter方法
	3、编写一个无参数构造方法
	4、编写一个全参数的构造方法

基本布尔类型的Getter方法
	getxxx变成isxxx
局部变量与成员变量不同
	1、定义位置不同
	2、内存位置不同
	3、生命周期不同
	4、默认值不同

