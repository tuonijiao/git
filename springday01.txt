spring介绍：
	覆盖到整个框架(三层),功能：对象的容器
	一站式框架：管理项目中的所有对象
	1、导包spring-framework-4.2.4.RELEASE
	2、导入核心容器包
			4+2
			bean
			context
			core
			epression
			cmmons-logging
			log4j
			
			spring-web
			
	2、创建对象
		class User
	3、书写配置-注册配置到
		放到src下
		名为applicationContext
		导入约束
			catalog	edit
			验证alt=/
		将User对象交给spring容器管理
			<bean name="User" class="User路径"></beans>
		测试
			1、创建容器对象
			ApplicationContext ac = new ClassPathXmlApplicationContext();
			2、向容器要User对象
			User u = (User) ac.getBean("user");
			3、打印User对象
IOC和DI
	IOC：inverse of Control 控制反转
		对象的创建以及依赖关系可以有spring完成创建以及注入
		反转控制是反转了对象的创建方式，从我们自己创建反转给了spring
	DI： Dependency Injection 依赖注入
		注入方式
			set方法注入
			构造方法注入
			字段注入
		注入类型
			值类型注入	8大基本数据类型
			引用类型注入	将依赖对象注入
BeanFactory接口
		最原始接口：
			接口实现类的功能单一
			接口实现类的容器特点：每次获得对象时才会创建对象
ApplicationContext		
		特点：	每次容器启动时就会创建容器中配置的所有对象，并提供更多功能
				从类路径下加载配置文件：ClassPathXmlApplicationContext
				从硬盘绝对路径下加载配置文件
spring配置讲解
		<bean>元素:描述需要spring容器管理的对象
			name属性：给管理对象起个名字，可以重复，可以使用特殊字符 
			class属性：完整类名
			id属性：给bean起名字，与name属性一模一样，名称不可以重复，不能使用特殊字符
三种对象创建方式：
		1、空参构造创建
		2、静态工厂	（方法静态）
		3、实例工厂		
scope属性：作用范围属性
		singleon(默认值)：单例对象，被标识为单例的对象再spring容器中只会被创建一次
		prototype：多例原型，被标识为多例的对象，每次再获得时才会创建，并且每次创建时都是新的
		request
		session
生命周期属性：
		配置一个方法作为生命周期初始化方法：init-method
		配置一个销毁方法：destory-method	
模块化配置
		导入其他spring配置文件
		<import resource="xx/xx/applicationContext.xml"/>		
属性注入：
		1、set方法
				<property name="user对象" value="值"></property>
				<property age="user对象" value="值"></property>
				<property name="user对象" ref="引用类型属性名"></property>
		2、构造方法注入
				<bean name="user" class="">
					<contructor-arg name="" value="" index=0 type="java.long.Integer"><contructor/>
					<contructor-arg name="" ref=""></contructor>
				<bean>
				value配置的参数,一般是用在数字,字符串之类的,而不能放对象
				ref是存的是对象的引用!
				name:构造参数名
				index：构造函数参数索引
				type：构造函数参数类型
		3、p名称空间注入
				1、导入p名称空间
				2、使用p：属性完成注入
					-值类型：p:属性名="值"
					-对象类型： p：属性名-ref="bean名称"
		4、spel注入	spring Expression Language
				value=”#{user.name}"
				引用类型属性不能使用
复杂类型注入：
		1、数组类型注入
				<bean name="xx" class="xx">
					<!-- 如果数组只准备注入一个值（对象），直接使用value|ref即可-->
					<property name="arr" value="tom"></property>
					<array>
						<value>1</value>
						<value>1</value>
						<ref bean="user对象">
					</array>
					</bean>
		2、list类型注入	同上
		3、map类型注入
				<property name="map">
					<map> 
						<entry key="url" value="jdbc:mysql://crm"></enrty>
						<entry key="user" value-ref="user对象"></enrty>
						<entry key-ref="user对象" value-ref="user对象"></enrty>
		4、properties注入	
				<props>
					<prop key="132">123</prop>
				</props>
<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>ClassPath:applicationContext.xml</param-value>
</context-param>			
			
spring中使用注解代替xml配置
		导包：spring-aop
		1、为主配置文件引入新的约束
			context
		2、开启使用注解
			component-scan base-package=""
		3、在类中使用注解完成配置
			@Component("user")
				@Service("user")		sercice层
				@Controller("user")		web层
				@Repository("user")		dao层
			@Scope(scopeName="prototype")
			@value("值")	值类型注入
			@Autowired	自动装配	引用类型注入
				@Qualifier("自动装配对象名称")
			@Resource(name="手动注入哪个名称的对象")
			@PostConstruct	创建后调用	init-method
			@PreDestory		销毁后调用  destory-method
spring-sts插件
spring整合junit测试
			1、导包4+2+aop+test
			2、@RunWith(SpringjUnit4ClassRunner.class)//创建容器
			3、@ContextConfiguration("ClassPath:applicationContext.xml")//指定容器使用哪个配置
			4、Resource(name="user")//注入
			5、测试
spring中的aop思想
			概念:横向重复，纵向抽取。面向切面编程
			Spring能够为容器中管理的对象生成动态代理对象
实现aop的原理：
			动态代理：被代理对象必须产生接口，才能实现代理对象
			
			cglib代理：可以对任何类代理，原理是对目标对象进行继承代理
代理
		将重复的代码让代理去做，实现横向重复、纵向抽取
aop名词：
		Joinpoint-连接点: 在目标对象中所有可以增强的方法
		Pointcut-切入点： 目标对象已经增强的方法
		Advice-通知/增强：增强的代码	
		Target-目标对象： 被代理对象			
		Weaving-织入：	  将通知应用到连接点形成切入点	  
		Proxy-代理：	  将通知织入目标对象后，形成代理对象
		aspect-切面：	  切入点+方法
		1、导包
			4+aop、aspect、aopalliance、weave
		2、准备目标对象
		3、准备通知
			创建通知类
				前置通知---before();
					-在目标方法运行之前调用
				后置通知-如果出现异常不会调用
					-在目标方法运行之后调用
					---afterReturning();
				环绕通知
					-在目标方法运行之前和之后调用
					---around(ProceedingJoinPoint pjp);
				异常拦截通知
					-如果出现异常，就会调用
					---afterException();
				后置通知-无论是否出现异常，异常都会调用
					-在目标方法运行之后调用  
		4、配置进行织入
				准备：导入aop约束
				1、配置目标对象
				2、配置通知对象
				3、配置将通知织入目标对象
					<aop:config>
						<aop:pointcut expression="excution(public void 切点的完整类名)" id="pc"/>
						<aop:aspect ref="通知类">//指定before为前置通知
							<aop:before mothod="before" point-ref="pc"/>
						</aop:aspect>
					</aop:config>	

spring整合jdbc
		JDBCTemplate JDBC模板对象：操作数据库的对象
		1、导包
			4+2
			spring-test
			spring-aop
			Junit4类库
			c3p0连接池
			JDBC驱动
			spring-jdbc	 模板
			spring-tx	 事务
		2、	-配置文件中注入dataSource
			<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDateSource">
				<property name="driverClassName" value="${jdbc.driverClassName}"></property>
				<property name="jdbcurl" value="${jdbc.jdbcurl}"></property>
				<property name="username" value="${jdbc.username}"></property>
				<property name="password" value="${jdbc.password}"></property>
			</bean>
			-继承JDBCSupport，注入JdbcTemplate
			<bean id="personDao" class="com.lzl.spring.jdbc.dao.impl.PersonDaoImpl">
				<property name="dataSource">
				<ref bean="dataSource"/>
				</property>
			</bean>
		
db.property		
			jdbc.jdbcurl=jdbc:mysql:///hibernate
			jdbc.driverClassName=com.mysql.jdbc.Driver
			jdbc.username=root
			jdbc.password=root
			指定spring读取db.property配置
			<context:property-placeholder location="classpath:db.property"/>  	
事务：
		事物特性：acid	原子性、一致性、隔离性、持久性
		事务并发问题
		事务的隔离级别
				读未提交
				读已提交
				可重复读
				串行化
		spring封装了事务管理代码
			-打开事务
			-提交事务
			-回滚事务
			-spring提供了一个接口PlatformTransactionManager
spring管理事务三种方式：
		事务是一系列的动作，它们综合在一起才是一个完整的工作单元，这些动作必须全部完成，如果有一个失败的话，那么事务就会回滚到最开始的状态，仿佛什么都没发生过一样。 
		在企业级应用程序开发中，事务管理必不可少的技术，用来确保数据的完整性和一致性。
		编码式事务管理
		声明式事务管理
			xml配置(aop)
				1、导包
						4+aop、aspect、aopalliance、weave
				2、导入新的约束tx
					<bean>：最基本
					<context>：读取properties配置
					aop:配置aop
					tx:配置事务通知 
				3、配置事务通知
					以方法为单位,指定方法应用什么事务属性 isolation:隔离级别 propagation:传播行为 read-only:是否只读
				4、配置织入
					<aop:config>
						<!-- 配置切点表达式 -->
						<aop:pointcut expression="execution(* cn.itcast.service.*ServiceImpl.*(..))" id="txPc" />
						<!-- 配置切面 : 通知+切点 advice-ref:通知的名称 pointcut-ref:切点的名称 -->
						<aop:advisor advice-ref="txAdvice" pointcut-ref="txPc" />
					</aop:config>

			注解配置(aop)	
					@Transactional 可以作用于接口、接口方法、类以及类方法上。
ssh整合包(41)
		hibernate：
			-hibernate/lib/required
			-hibernate/lib/jpa-java持久化规范
			数据库驱动-mysql
		struts：
			struts-blank.war/WEB-INF/lib/*
					注意:javassist-3.18.1-GA.jar包与hibernate中的重复
			struts整合spring插件包
					注意:这个包一旦导入,那么struts2在启动时就会寻找spring容器.找不到将会抛出异常
					struts2-spring-plugin
		spring
			基本包：4+2
				core\beans\context\expression\logging\log4j
			整合web	web包	
				spring-web
			整合aop：4个
				spring-aop\spring-aspect\aop联盟\aopweaving
			整个jdbc事务:4个
				spring-jdbc、springtx、c3p0、spring-orm
			整合Junit4测试：test包
				spring-test
			标签库：
				jstl，jar
				standar. jar
			
			
			
			
			
			