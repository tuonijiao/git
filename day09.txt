接口的好处：通用型、隔离性
接口的格式与组成部分
	格式：public interface 接口名称{
	}   
	接口中包含的组成部分
	1、抽象方法
	2、常量
	3、默认方法（java8）
	4、静态方法（java8）
	5、私有方法（java9）
定义一个抽象方法：
	public abstract 返回值类型 方法名称（参数类型  参数名称）；
注意：
	1、接口中的抽象方法，修饰必须是public abstract，可以省略。
	2、抽象方法只有方法头，没有大括号方法体。
接口实现类的定义
	3、public class 实现类名称 implement 接口名称{
	一定要覆盖重写所有的抽象方法
}
覆盖重写抽象方法（Override）
	1、将接口中的抽象方法抄过来
	2、去掉abstract关键字
	3、写上大括号方法体
接口与实现类的基本使用
	接口名称 引用名 = new 实现类名称();
	调用：引用名.抽象方法名（参数）；
注意：
	1、接口无法调用实现类专有的方法，只能调用接口中定义好的内容 
	2、调用接口中的抽象方法时，真正运行的是右侧new的时候类的具体方法
	3、调用时看左边，运行的时候看右边
面向接口编程：
	好处：隔离，统一
	使用的功能接口已经满足，就不在乎具体的类是谁，在乎接口即可
Lambda表达式：
	函数式编程:
	Lambda表达式=>>((x,y)->a+b)
	语义代表怎么做，没有对象的概念
	表达式前面的小括号就是接口抽象方法的小括号
	箭头后面代表拿到了参数之后做的事情
函数是接口
	概念:有且仅有一个抽象方法的接口，叫函数式接口
检测当前接口是不是函数式接口：
	@FunctionalInterface//使用注解
标准格式：
	方法参数，箭头，方法体
	1、调用方法时，根据参数类型传参推断函数式接口
	2、也有可以根据赋值语句左侧的类型进行Lambda上下文推断
Lambda表达式中，凡是可以推导的，都是可以省略的。











